#Sobre alarm1: recepción de diferentes tipos de signals y envío de eventos
desde la consola
 1. Por la consola se muestra un mensaje de proceso terminado por alarma: [1]    5621 alarm      ./alarm1

 2. Aunque el proceso se termina como antes, en este caso el causante de la finalización es el comando que hemos ejecutado. Es por ello que por consola se muestra el siguiente mensaje: [1]    6123 killed     ./alarm1

 3. Es el proceso original del shell para ejecutar comandos, ya que los hijos los ejecutan y el padre(el original) recoge el estado de finalización de estos e imprime por pantalla el resultado. Con una variable y la llamada waitpid() es posible recoger el estado de finalización del proceso al terminar este.
 
 4. No, no es necesario, ya que el tratamiento por defecto de SIGALRM es terminar el proceso y como hacemos una llamada a sigsuspend que provoca una espera bloqueante, el sigalrm siempre se ejecuta en vez del exit
 
#Sobre alarm2: cualquier signal se puede enviar desde el Shell.
 1. Al ejecutar el comando kill -ALRM se imprime la alarma que ha terminado y los segundos actuales, pero el programa sigue ejecutandose ya que el bucle funciona en base a la variable global declarada al inicio que lleva el control de los segundos de 10 en 10. El control de tiempo no es preciso ya que el tratamiento que se da a sigalarm es de incrementar la variable en +10, si se hacen los kills en menos tiempo realmente se está terminando el programa en menos de lo previsto
 
 2. No, aunque es possible modificar el tratamiento asociado a la mayoría de señales, SIGKILL y SIGSTOP no pueden modificarse
 
 3. El valor de retorno es el tiempo restante a la siguente alarma. Una solución posible podría ser restar a la variable "segundos" el valor que devuelve la función de la alarma.

 
 #Sobre alarm3: la tabla de programación de signals se hereda.
  1. Los dos. Se ven ejecutandose el programa y esperando a que el temporitzador acabe. Se muestra en pantalla el pid de los procesos padre e hijo, a loss cuales salta laalarma.
  
 # Sobre alarm4: 
 1.   El padre recibe cada alarma. Cuando se realiza kill con su correspondiente pid, el proceso simplemente no sale ni hace nada, se queda colgado en el sigsupend. Se ha comprovado ejecutando alarm4 y mirando los mensajes de la pantalla, mientras que con otra terminal se han ejecutado los kill correspondientes.
  
  
