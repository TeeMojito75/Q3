PREGUNTA 18.¿Cómo puede saber un proceso el pid de sus hijos? ¿Qué llamada pueden
utilizar los procesos para consultar su propio PID?
-> No existe una fucnión como tal que permita obtener el pid de los hijos, solo de los padres. Es por ello que para obtenerlo tenemos que obtenerelo directamente cuando se ejecuta el fork, de lo contrario sería imposible. Para consultar el propio pid basta con llamar a la función getìd().

PREGUNTA 19.¿En qué casos se ejecutará cualquier código que aparezca justo después de la
llamada execlp (En cualquier caso/ En caso que el execlp se ejecute de forma correcta/ En caso
que el exclp falle)?
-> En caso de que exelcp falle, ya que en caso de acierto exelcp harà que el proceso se modifique y por tanto el código siguiente a la LL.S. no podrà leerse ni ejecutarse.

PREGUNTA 20.¿Qué directorios hay dentro de /proc/PID_PADRE? ¿Qué opción de ls has
usado?
-> Nos encontramos 3 directorios. En concreto: 
	1: CWD (current working directory)
	2: El directorio root
	3: El directorio de ejecución exe
Para acceder a esta información he usado el comando ls -l

PREGUNTA 21.Para el proceso padre, apunta el contenido de los ficheros status y cmdline.
Compara el contenido del fichero environ con el resultado del comando env (fíjate por ejemplo
en la variable PATH y la variable PWD) ¿Qué relación hay? Busca en el contenido del fichero
status el estado en el que se encuentra el proceso y apúntalo en el fichero de respuestas.
Anota también el tiempo de CPU que ha consumido en modo usuario que puedes encontrarlo
en el fichero stat del proceso (verás que stat contiene una serie de números, consulta en el
manual el formato qué representa cada uno de esos números: man proc).

Status: 
Name:   myPS
Umask:  0002
State:  R (running)
Tgid:   7786
Ngid:   0
Pid:    7786
PPid:   4544
TracerPid:      0
Uid:    1000    1000    1000    1000
Gid:    1000    1000    1000    1000
FDSize: 64
Groups: 4 24 27 30 46 122 134 135 1000 
NStgid: 7786
NSpid:  7786
NSpgid: 7786
NSsid:  4544
VmPeak:     2704 kB
VmSize:     2640 kB
VmLck:         0 kB
VmPin:         0 kB
VmHWM:       920 kB
VmRSS:       920 kB
RssAnon:              88 kB
RssFile:             832 kB
RssShmem:              0 kB
VmData:       92 kB
VmStk:       132 kB
VmExe:         4 kB
VmLib:      1796 kB
VmPTE:        40 kB
VmSwap:        0 kB
HugetlbPages:          0 kB
CoreDumping:    0
THP_enabled:    1
Threads:        1
SigQ:   1/62970
SigPnd: 0000000000000000
ShdPnd: 0000000000000000
SigBlk: 0000000000000000
SigIgn: 0000000000000000
SigCgt: 0000000000000000
CapInh: 0000000000000000
CapPrm: 0000000000000000
CapEff: 0000000000000000
CapBnd: 000001ffffffffff
CapAmb: 0000000000000000
NoNewPrivs:     0
Seccomp:        0
Seccomp_filters:        0
Speculation_Store_Bypass:       thread vulnerable
SpeculationIndirectBranch:      conditional enabled
Cpus_allowed:   fff
Cpus_allowed_list:      0-11
Mems_allowed:   00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000001
Mems_allowed_list:      0
voluntary_ctxt_switches:        0
nonvoluntary_ctxt_switches:     692

Cmdline: ./myPS^@

Environ: PWD=/home/juanca/Documentos/Q3/SO/S3/practica
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin

Comando env: PWD=/proc/7786
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin

-> Podemos observar que aunque el PATH si es el mismo tanto para el fichero como para el comando, el PWD cambia uno respecto al otro, ya que el comando se ejecuta desde el directorio proc, mientras que en el archivo environ nos enseña el pwd del proceso. El proceso se encuentra en el estado de running.
Tiempo transcurrido en modo usuario: 75042

PREGUNTA 22.En el caso del proceso hijo, ¿a qué ficheros “apuntan” los ficheros cwd y exe?
¿Cuál crees que es el significado de cwd y exe?
->En el proceso hijo estos ficheros no están apuntando a nada. Cwd es el directorio de trabajo actual, mientras que exe es la ruta hasta el directorio donde se encuentra el ejecutable. Es probable que el hijo no necesite estos valores para que funcione correctamente y por ello no los hereda del padre (No estoy completamente seguro de porqué es así).

PREGUNTA 23.En el caso del proceso hijo, ¿puedes mostrar el contenido de los ficheros
environ, status y cmdline del proceso hijo? ¿En qué estado se encuentra?

Environ: El fichero se encuentra vacio
Status: Podemos ver que el proceso se encuentra en estado zombie
Name:   ps
State:  Z (zombie)
Tgid:   7787
Ngid:   0
Pid:    7787
PPid:   7786
TracerPid:      0
Uid:    1000    1000    1000    1000
Gid:    1000    1000    1000    1000
FDSize: 0
Groups: 4 24 27 30 46 122 134 135 1000 
NStgid: 7787
NSpid:  7787
NSpgid: 7786
NSsid:  4544
Threads:        1
SigQ:   1/62970
SigPnd: 0000000000000000
ShdPnd: 0000000000000000
SigBlk: 0000000000000000
SigIgn: 0000000000000000
SigCgt: 0000000073d1fef9
CapInh: 0000000000000000

Cmdline: Este fichero también se encuentra vacío

PREGUNTA 24.En el caso del proceso hijo, ¿a qué ficheros “apuntan” los ficheros cwd y exe?
¿Cuál crees que es el significado de cwd y exe? ¿Qué diferencias hay con la versión anterior?
¿A qué se deben?
->Ahora los ficheros apuntant a los mismos directorios que el padre, ya que este proceso no ha mutado y no se ha quedado en estado zombie

PREGUNTA 25.En el caso del proceso hijo, ¿puedes mostrar el contenido de los ficheros
environ, status y cmdline del proceso hijo? ¿En qué estado se encuentra? ¿Qué diferencias hay
con la versión anterior? ¿A qué se deben?
Environ: PWD=/home/juanca/Documentos/Q3/SO/S3/practica 
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin
Status: ame:   myPS_v0
Umask:  0002
State:  R (running)
Tgid:   8033
Ngid:   0
Pid:    8033
PPid:   8032
TracerPid:      0
Uid:    1000    1000    1000    1000
Gid:    1000    1000    1000    1000
FDSize: 64
Groups: 4 24 27 30 46 122 134 135 1000 
NStgid: 8033
NSpid:  8033
NSpgid: 8032
NSsid:  4544
VmPeak:     2640 kB
VmSize:     2640 kB
VmLck:         0 kB
VmPin:         0 kB
VmHWM:        92 kB
VmRSS:        92 kB

Cmdline: /myPS_v0^@

-> En este caso el proceso se encuentre en el estado de ejecución (running) ya que como este código no hace el exelcp no aborta el proceso hijo y por tanto este tiene todas las funcionalidades heredadas correctamente, a diferencia del anterior, que se quedo en estado zombie.



