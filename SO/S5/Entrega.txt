#PREGUNTA 35.¿Qué variables aparecen en la salida del nm de mem1_dynamic? ¿Qué
dirección ocupa cada una? Indica a que región pertenece cada variable según la salida del nm
y el tipo de variable (local o global)
-> 000000000000038c r __abi_tag
                 U atoi@GLIBC_2.2.5
0000000000004010 B __bss_start
0000000000004020 b completed.0
                 w __cxa_finalize@GLIBC_2.2.5
0000000000004000 D __data_start
0000000000004000 W data_start
0000000000001130 t deregister_tm_clones
00000000000011a0 t __do_global_dtors_aux
0000000000003d98 d __do_global_dtors_aux_fini_array_entry
0000000000004008 D __dso_handle
0000000000003da0 d _DYNAMIC
0000000000004010 D _edata
0000000000005040 B _end
                 U exit@GLIBC_2.2.5
0000000000001454 T _fini
00000000000011e0 t frame_dummy
0000000000003d90 d __frame_dummy_init_array_entry
0000000000002144 r __FRAME_END__
0000000000004040 B globalArray
0000000000003f90 d _GLOBAL_OFFSET_TABLE_
                 w __gmon_start__
000000000000206c r __GNU_EH_FRAME_HDR
0000000000001000 T _init
0000000000002000 R _IO_stdin_used
                 w _ITM_deregisterTMCloneTable
                 w _ITM_registerTMCloneTable
                 U __libc_start_main@GLIBC_2.34
00000000000011e9 T main
                 U malloc@GLIBC_2.2.5
0000000000001160 t register_tm_clones
                 U sprintf@GLIBC_2.2.5
0000000000001100 T _start
                 U strlen@GLIBC_2.2.5
0000000000004010 D __TMC_END__
                 U write@GLIBC_2.2.5

En la salida del comando nm podemos observar el global array situado en el bss (0000000000004040 B).
Las variables locales no se muestran, ya que a estas no se les asigna un espacio de memoria hasta el momento de su utilización.


#PREGUNTA 36.Para los dos ejecutables, compilado estático y dinámico, observa su tamaño, la
salida de los comandos nm y objdump ¿En qué se diferencian los dos ejecutables?
-> Tanto si usamos el comando nm como el objdump -d, podemos observar que cuando compilamos el programa 
y enlazamos las librerías estáticas, el ejectuable resultante es mucho mayor que cuando lo hacemos de la forma tradicional con las librerías dinámicas. Esto se debe a que al enlazar en las librerías estáticas estas se incluyen en el compilado, dando como resultado un ejecutable de mucho más tamaño que si solo usamos el compilado por default. 

#PREGUNTA 37.Observa el contenido del fichero maps del /proc para cada proceso y apunta
para cada región la dirección inicial, dirección final y etiqueta asociada. ¿Qué diferencia hay
entre el maps de cada proceso?
-> 
DINÁMICAS 
1  564b50f0e000-564b50f0f000 r--p 00000000 08:16 1706518                    /home/juanca/Documentos/Q3/SO/   S5/mem1_dynamic                                                                                        
 1 564b50f0f000-564b50f10000 r-xp 00001000 08:16 1706518                    /home/juanca/Documentos/Q3/SO/   S5/mem1_dynamic                                                                                        
 2 564b50f10000-564b50f11000 r--p 00002000 08:16 1706518                    /home/juanca/Documentos/Q3/SO/   S5/mem1_dynamic                                                                                        
 3 564b50f11000-564b50f12000 r--p 00002000 08:16 1706518                    /home/juanca/Documentos/Q3/SO/   S5/mem1_dynamic                                                                                        
 4 564b50f12000-564b50f13000 rw-p 00003000 08:16 1706518                    /home/juanca/Documentos/Q3/SO/   S5/mem1_dynamic                                                                                        
 5 564b50f13000-564b50f14000 rw-p 00000000 00:00 0                                                        
 6 564b5208b000-564b520ac000 rw-p 00000000 00:00 0                          [heap]                        
 7 7fdea39da000-7fdea39dd000 rw-p 00000000 00:00 0                                                        
 8 7fdea39dd000-7fdea3a05000 r--p 00000000 08:16 5904568                    /usr/lib/x86_64-linux-gnu/libc   .so.6                                                                                                  
 9 7fdea3a05000-7fdea3b9a000 r-xp 00028000 08:16 5904568                    /usr/lib/x86_64-linux-gnu/libc   .so.6                                                                                                  
10 7fdea3b9a000-7fdea3bf2000 r--p 001bd000 08:16 5904568                    /usr/lib/x86_64-linux-gnu/libc   .so.6                                                                                                  
11 7fdea3bf2000-7fdea3bf6000 r--p 00214000 08:16 5904568                    /usr/lib/x86_64-linux-gnu/libc   .so.6                                                                                                  
12 7fdea3bf6000-7fdea3bf8000 rw-p 00218000 08:16 5904568                    /usr/lib/x86_64-linux-gnu/libc   .so.6                                                                                                  
13 7fdea3bf8000-7fdea3c05000 rw-p 00000000 00:00 0                                                        
14 7fdea3c15000-7fdea3c17000 rw-p 00000000 00:00 0                                                        
15 7fdea3c17000-7fdea3c19000 r--p 00000000 08:16 5904231                    /usr/lib/x86_64-linux-gnu/ld-l   inux-x86-64.so.2                                                                                       
16 7fdea3c19000-7fdea3c43000 r-xp 00002000 08:16 5904231                    /usr/lib/x86_64-linux-gnu/ld-l   inux-x86-64.so.2                                                                                       
17 7fdea3c43000-7fdea3c4e000 r--p 0002c000 08:16 5904231                    /usr/lib/x86_64-linux-gnu/ld-l   inux-x86-64.so.2                                                                                       
18 7fdea3c4f000-7fdea3c51000 r--p 00037000 08:16 5904231                    /usr/lib/x86_64-linux-gnu/ld-l   inux-x86-64.so.2                                                                                       
19 7fdea3c51000-7fdea3c53000 rw-p 00039000 08:16 5904231                    /usr/lib/x86_64-linux-gnu/ld-l   inux-x86-64.so.2                                                                                       
20 7ffd71413000-7ffd71434000 rw-p 00000000 00:00 0                          [stack]                       
21 7ffd714e6000-7ffd714ea000 r--p 00000000 00:00 0                          [vvar]                        
22 7ffd714ea000-7ffd714ec000 r-xp 00000000 00:00 0                          [vdso]                        
23 ffffffffff600000-ffffffffff601000 --xp 00000000 00:00 0                  [vsyscall]  

ESTÁTICAS:
1  00400000-00401000 r--p 00000000 08:16 1706528                            /home/juanca/Documentos/Q3/SO/   S5/mem1_static                                                                                         
 1 00401000-00498000 r-xp 00001000 08:16 1706528                            /home/juanca/Documentos/Q3/SO/   S5/mem1_static                                                                                         
 2 00498000-004c1000 r--p 00098000 08:16 1706528                            /home/juanca/Documentos/Q3/SO/   S5/mem1_static                                                                                         
 3 004c1000-004c5000 r--p 000c0000 08:16 1706528                            /home/juanca/Documentos/Q3/SO/   S5/mem1_static                                                                                         
 4 004c5000-004c8000 rw-p 000c4000 08:16 1706528                            /home/juanca/Documentos/Q3/SO/   S5/mem1_static                                                                                         
 5 004c8000-004ce000 rw-p 00000000 00:00 0                                                                
 6 01dfe000-01e20000 rw-p 00000000 00:00 0                                  [heap]                        
 7 7ffc2c34f000-7ffc2c370000 rw-p 00000000 00:00 0                          [stack]                       
 8 7ffc2c3cf000-7ffc2c3d3000 r--p 00000000 00:00 0                          [vvar]                        
 9 7ffc2c3d3000-7ffc2c3d5000 r-xp 00000000 00:00 0                          [vdso]                        
10 ffffffffff600000-ffffffffff601000 --xp 00000000 00:00 0                  [vsyscall]                                                                                                                

->Podemos observar que el contenido de maps es mucho mayor en el maps de mem1_dynamic, que en el ejecutable enlazado a las librerías estáticas. Esto es debido que al inlcuir estas en el compilado, ahora ya no se requiere acceder a ellas a través de la memoría y por lo tanto hay parte de las direcciones que enseña el maps de dynamic que sería redundante usar en el static.

#PREGUNTA 38.¿A qué región de las descritas en el maps pertenece cada variable y cada zona
reservada con malloc? Apunta la dirección inicial, dirección final y el nombre de la región
-> El malloc, como vimos en teoría, aumenta o libera espacio del heap, por lo tanto la dirección de las variables del programa en el maps corresponde al de heaps (que sale como una entidad, sin las divisiones, por así decirlo):
HEAP DYNAMIC: 564b5208b000-564b520ac000
HEAP STATIC: 01dfe000-01e20000

#PREGUNTA 39.Para cada ejecución apunta el número de mallocs hechos y la dirección inicial y
final del heap que muestra el fichero maps del /proc. ¿Cambia el tamaño según el parámetro
de entrada? ¿Por qué?
->
1. Num Malloc == 3:
	HEAP = 55888b3f1000-55888b3f2000 = 94044940083200 - 94044940079104 = 4096;
2. Num Malloc == 5:
	HEAP = 55888b3f1000-55888b3f2000 = 94044940083200 - 94044940079104 = 4096;
3. Num Malloc == 100:
	HEAP = 55b88057e000-55b880602000 = 94250916126720 - 94250915586048 = 540672;
-> Observamos que para los dos primeros casos, al usar malloc se ha reservado un espacio suficientemente grande para que tatno para 3 malloc como para 5, el heap conserva el mismo tamaño, mientras que para num mallocs = 100, si que se reserva mucho más espacio en el heap, y por lo tanto este es mayor.

#PREGUNTA 40.¿Cuál es el tamaño del heap en este caso? Explica los resultados
-> HEAP en v2: 55ff0a828000-55ff0a849000 = 94553881481216 - 94553881346048 = 135168;
Podemos ver que aunque el heap es más grande que el tamaño básico de la pregunta enterior, es mucho menor que en el caso para 100 de la pregunta anterior. Esto se debe a que parte del heap se ha ido liberando de la memoria gracias a la función heap:

#PREGUNTA 41.Para cada ejecución apunta el número de sbrks hechos y la dirección inicial y
final del heap que se muestra en el maps del /proc. ¿Cambia el tamaño del heap respecto al
observado en la pregunta 6? ¿Por qué?
-> Sbrk = 3: HEAP = 5594cdb9b000-5594cdb9e000 = 94097595031552 - 94097595019264 = 12288 / 4 = 3000+-
-> Sbrk = 5: HEAP = 555b45caf000-555b45cb4000 = 93850501332992 - 93850501312512 =  20480 / 4 = 5000+-
-> Sbrk = 100: HEAP = 55aada28b000-55aada2ef000 = 94192293310464 - 94192292900864 = 102400

Com podem veure, sbrk sempre reserva l'espai desitjat per el nombre d'execucions demanades, ja que sbrk sempre augmenta el heap.

#PREGUNTA 42.¿Qué error contiene el código del programa? ¿Por qué el programa no falla en
las primeras iteraciones? Propón una alternativa a este código que evite que se genere la
excepción, detectando, antes de que pase, que vamos a hacer un acceso fuera del espacio de
direcciones.
-> El programa hace un solo malloc. Este reserva un cierto espacio del heap y ya. A partir de ahí el bucle itera infinitamente en el heap, sin tener en cuenta el tamaño del malloc usado. Es por ello que al cabo de muchas iteraciones el se llega al máximo del heap y al intentar acceder a una dirección posterior a este sale la excepción. Para corregir esto bastaría meter un condicional para que el programa iterara solo mientras la dirección de p sea menor a la dirección final del heap. Para ello bastaría con hacer sbrk(0) y guardar el valor de retorno en un puntero a int.


